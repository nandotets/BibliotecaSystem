/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfaceGrafica;

import TipoDados.Autor;
import TipoDados.Livro;
import java.awt.event.ActionEvent;
import java.io.EOFException;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 * a
 *
 * @author Fernando TeTz
 */
public class TelaManutençãoAutor extends ModeloManutenção {

    ArrayList<Autor> autores = new ArrayList<>();
    ArrayList<Livro> livros = new ArrayList<>();
    public static Autor autor;
    String pesquisa[] = {"Nome", "ID"};

    public TelaManutençãoAutor() throws Exception {
        try {
            lerArquivo();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Arquivo 'ArqAutores.dad' não encontrado. Um novo arquivo será criado.",
                    "Tela de erro", JOptionPane.ERROR_MESSAGE);
            gravaArquivo();
        }
        montaCombo();
        initComponents();
        tabelaAutores.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tabelaAutores.getColumnModel().getColumn(0).setMinWidth(30);
        tabelaAutores.getColumnModel().getColumn(0).setMaxWidth(50);
        autor = new Autor();
    }

    private void montaCombo() {
        cbPesquisa.removeAllItems();
        for (String pesquisa1 : pesquisa) {
            cbPesquisa.addItem(pesquisa1);
        }
        cbPesquisa.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaAutores = new javax.swing.JTable();

        setTitle("Manutenção de autores");

        tabelaAutores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaAutores.getTableHeader().setReorderingAllowed(false);
        tabelaAutores.getColumnModel().getColumn(0).setPreferredWidth(100);
        tabelaAutores.getColumnModel().getColumn(1).setPreferredWidth(200);
        jScrollPane1.setViewportView(tabelaAutores);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 524, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(57, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lerArquivo() throws Exception {
        Autor autorx = null;
        autores.clear();
        ObjectInputStream arquivo = null;
        try {
            arquivo = new ObjectInputStream(new FileInputStream("ArqAutores.dad"));
            do {
                autorx = (Autor) arquivo.readObject();
                autores.add(autorx);
            } while (autorx != null);
        } catch (EOFException e) {
            arquivo.close();
        }
    }

    private void lerArquivoLivros() throws Exception {
        Livro livrox = null;
        livros.clear();
        ObjectInputStream arquivo = null;
        try {
            arquivo = new ObjectInputStream(new FileInputStream("ArqLivros.dad"));
            do {
                livrox = (Livro) arquivo.readObject();
                livros.add(livrox);
            } while (livrox != null);
        } catch (EOFException e) {
            arquivo.close();
        }
    }

    @Override
    public void bNovoActionListener(ActionEvent evt) {
        DefaultTableModel modelo = (DefaultTableModel) tabelaAutores.getModel();
        try {
            TelaAdicionarAutor telaedit = new TelaAdicionarAutor();
            telaedit.setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Erro ao abrir tela de adicionar autores.",
                    "Tela de erro", JOptionPane.ERROR_MESSAGE);
        }
        try {
            lerArquivo();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao ler arquivo.", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
        for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
            modelo.removeRow(k);
        }

        for (int x = 0; x < autores.size(); x++) {
            Object[] linhax = {autores.get(x).getIdAutor(), autores.get(x).getNome()};
            modelo.addRow(linhax);
        }
    }

    @Override
    public void bEditarActionListener(ActionEvent evt) {
        DefaultTableModel modelo = (DefaultTableModel) tabelaAutores.getModel();
        int linha = tabelaAutores.getSelectedRow();
        if (linha == -1) {
            JOptionPane.showMessageDialog(null, "Nenhuma autor selecionado.\n"
                    + "Por favor selecione um autor para ser editado.", "ERRO", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int idEdit = Integer.parseInt(modelo.getValueAt(linha, 0).toString());
        for (int x = 0; x < autores.size(); x++) {
            if (autores.get(x).getIdAutor() == idEdit) {
                autor = autores.get(x);
                break;
            }
        }
        try {
            TelaEditarAutor telaedit = new TelaEditarAutor();
            telaedit.setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao abrir tela de editar autores." + ex.getMessage(),
                    "Tela de erro", JOptionPane.ERROR_MESSAGE);
        }

        try {
            lerArquivo();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao ler arquivo.", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
        for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
            modelo.removeRow(k);
        }

        for (int x = 0; x < autores.size(); x++) {
            Object[] linhax = {autores.get(x).getIdAutor(), autores.get(x).getNome()};
            modelo.addRow(linhax);
        }
    }

    public static Autor getAutor() {
        return autor;
    }

    @Override
    public void bSairActionListener(ActionEvent evt) {
        int result;
        try {
            result = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja sair?", "SAIR", JOptionPane.YES_NO_OPTION);
            if (result == 0) {
                TelaInicial.max = 0;
                this.dispose();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Tela de erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    @Override
    public void txPesquisa() {
        try {
            lerArquivo();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao abrir arquivo", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
        int tipoPesquisa = cbPesquisa.getSelectedIndex();
        DefaultTableModel modelo = (DefaultTableModel) tabelaAutores.getModel();
        for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
            modelo.removeRow(k);
        }
        if (tipoPesquisa == 0) {
            if (!(tPesquisa.getText().isEmpty())) {
                for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
                    modelo.removeRow(k);
                }
                for (int i = 0; i < autores.size(); i++) {
                    if (autores.get(i).getNome().contains(tPesquisa.getText())) {
                        Object[] linha = {autores.get(i).getIdAutor(), autores.get(i).getNome()};
                        modelo.addRow(linha);
                    }
                }
            }
        } else { //Pesquisa por ID
            for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
                modelo.removeRow(k);
            }
            for (int x = 0; x < autores.size(); x++) {
                if (Integer.toString(autores.get(x).getIdAutor()).equals(tPesquisa.getText())) {
                    Object[] linha = {autores.get(x).getIdAutor(), autores.get(x).getNome()};
                    modelo.addRow(linha);
                }
            }
        }
    }

    @Override
    public void bMostrarTodosActionListener(ActionEvent evt) {
        DefaultTableModel modelo = (DefaultTableModel) tabelaAutores.getModel();
        try {
            lerArquivo();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Nenhum autor cadastrado.", "NÃO ENCONTRADO", JOptionPane.ERROR_MESSAGE);
        }
        for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
            modelo.removeRow(k);
        }
        for (int x = 0; x < autores.size(); x++) {
            Object[] linha = {autores.get(x).getIdAutor(), autores.get(x).getNome()};
            modelo.addRow(linha);
        }
    }

    @Override
    public void bLimparTudoActionListener(ActionEvent evt) {
        DefaultTableModel modelo = (DefaultTableModel) tabelaAutores.getModel();

        for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
            modelo.removeRow(k);
        }
        tPesquisa.setText("");
    }

    @Override
    public void bExcluirActionListener(ActionEvent evt) {
        try {
            lerArquivo();
            lerArquivoLivros();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao ler arquivo.", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
        DefaultTableModel modelo = (DefaultTableModel) tabelaAutores.getModel();
        int linha = tabelaAutores.getSelectedRow();
        if (linha == -1) {
            JOptionPane.showMessageDialog(null, "Nenhuma autor selecionado.\n"
                    + "Por favor selecione um autor para ser excluído.", "ERRO", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int idRemove = Integer.parseInt(modelo.getValueAt(linha, 0).toString());
        for (int x = 0; x < autores.size(); x++) {
            if (autores.get(x).getIdAutor() == idRemove) {
                int result = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja excluir '"
                        + autores.get(x).getNome() + "' ?", "EXCLUIR AUTOR", JOptionPane.YES_NO_OPTION);
                if (result == 0) {
                    for (Livro livr : livros) { //Percorre todos os livros
                        for (int i = 0; i < livr.getAutoria().size(); i++) { //Percorre autoria do livr
                            if (livr.getAutoria().get(i).getIdAutor() == idRemove) {
                                JOptionPane.showMessageDialog(null, "Existe exemplar cadastrado com o autor "
                                        + livr.getAutoria().get(i).getNome() + ". Não é possível exclui-lo.",
                                        "EXCLUSÃO NÃO PERMITIDA.", JOptionPane.ERROR_MESSAGE);
                                return;
                            }
                        }
                    }
                    JOptionPane.showMessageDialog(null, "Autor '" + autores.get(x).getNome()
                            + "' excluído com sucesso.", "EXCLUIR AUTOR", JOptionPane.INFORMATION_MESSAGE);
                    autores.remove(x);
                    try {
                        gravaArquivo();
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, "Erro ao gravar no arquivo.", "ERRO", JOptionPane.ERROR_MESSAGE);
                    }
                    break;
                }
            }
        }
        for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
            modelo.removeRow(k);
        }
        for (int x = 0; x < autores.size(); x++) {
            Object[] ln = {autores.get(x).getIdAutor(), autores.get(x).getNome()};
            modelo.addRow(ln);
        }
    }

    private void gravaArquivo() throws Exception {
        try (ObjectOutputStream arquivo = new ObjectOutputStream(new FileOutputStream("ArqAutores.dad"))) {
            for (Autor autorx : autores) {
                arquivo.writeObject(autorx);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable tabelaAutores;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mudouCB() {
    }

}
