/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfaceGrafica;

import TipoDados.Associado;
import TipoDados.DataX;
import TipoDados.Emprestimo;
import TipoDados.Livro;
import TipoDados.Multa;
import TipoDados.Revista;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.io.EOFException;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * a
 *
 * @author Fernando TeTz
 */
public class TelaEfetuarDevolucao extends ModeloEmprestimos {

    ArrayList<Associado> associados = new ArrayList<>();
    ArrayList<Associado> listaEspera = new ArrayList<>();
    ArrayList<Emprestimo> emprestimos = new ArrayList<>();
    ArrayList<Livro> livros = new ArrayList<>();
    ArrayList<Revista> revistas = new ArrayList<>();
    ArrayList<Multa> multas = new ArrayList<>();
    Associado associado = new Associado();
    Emprestimo emprestimo = null;
    public static Livro livro = null;
    public static Revista revista = null;
    public static int identif = 0;
    double valorDeMulta;
    Calendar calendar = new GregorianCalendar();
    Date trialTime = new Date();
    int verificador = -1;
    String[] meses = {"Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho",
        "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"};
    DataX dataAtual = null;

    public TelaEfetuarDevolucao() throws Exception {
        try {
            lerArquivoAssociados();
        } catch (Exception ee) {
            JOptionPane.showMessageDialog(null, "Arquivo 'ArqAssociados.dad' não encontrado.\nVá à manutenção de associados"
                    + "para resolução do problema.", "Tela de erro", JOptionPane.ERROR_MESSAGE);
        }
        try {
            lerArquivo();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Arquivo 'ArqEmprestimos.dad' não encontrado. Um novo arquivo será criado.",
                    "Tela de erro", JOptionPane.ERROR_MESSAGE);
            gravaArquivo();
        }
        try {
            lerArquivoMultas();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Arquivo 'ArqMultas.dad' não encontrado. Um novo arquivo será criado.",
                    "Tela de erro", JOptionPane.ERROR_MESSAGE);
            gravaArquivoMultas();
        }
        try {
            lerArquivoLivros();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Arquivo 'ArqLivros.dad' não encontrado. Vá a manutenção de"
                    + "livros para resolução do problema.", "Tela de erro", JOptionPane.ERROR_MESSAGE);

        }
        initComponents();
        calendar.setTime(trialTime);
        labelDia.setText(Integer.toString(calendar.get(Calendar.DAY_OF_MONTH)));
        labelMes.setText(meses[calendar.get(Calendar.MONTH)]);
        labelAno.setText(Integer.toString(calendar.get(Calendar.YEAR)));
        dataAtual = new DataX((byte) calendar.get(Calendar.DAY_OF_MONTH),
                (byte) (calendar.get(Calendar.MONTH) + 1), (short) calendar.get(Calendar.YEAR));
        bSalvar.setText("Efetuar Devolução");
        bSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/devolucao.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        tCPF = new javax.swing.JFormattedTextField();
        labelCpf = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tNome = new javax.swing.JTextField();
        tTelefone = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaEmprestimosAssociado = new javax.swing.JTable();
        labelEmprestimos = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        labelAno = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        labelMes = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        labelDia = new javax.swing.JLabel();

        setResizable(true);
        setTitle("Efetuar devolução");
        setToolTipText("");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/icone.png"))); // NOI18N

        jPanel1.setToolTipText("");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados do associado"));
        jPanel2.setToolTipText("");

        try {
            tCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        tCPF.setToolTipText("Digite o CPF do associado");
        tCPF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tCPFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tCPFFocusLost(evt);
            }
        });

        labelCpf.setText("* CPF:");

        jLabel1.setText("Nome:");

        jLabel2.setText("Telefone:");

        tNome.setToolTipText("Nome do associado");
        tNome.setEnabled(false);

        tTelefone.setToolTipText("Telefone do associado");
        tTelefone.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tNome, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(labelCpf)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCpf)
                    .addComponent(tCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        tabelaEmprestimosAssociado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Data Empréstimo", "Devolução", "Exemplar"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaEmprestimosAssociado.setToolTipText("Tabela de emprestimos do associado");
        tabelaEmprestimosAssociado.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tabelaEmprestimosAssociado.getTableHeader().setReorderingAllowed(false);
        tabelaEmprestimosAssociado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tabelaEmprestimosAssociadoFocusGained(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaEmprestimosAssociado);
        if (tabelaEmprestimosAssociado.getColumnModel().getColumnCount() > 0) {
            tabelaEmprestimosAssociado.getColumnModel().getColumn(0).setResizable(false);
            tabelaEmprestimosAssociado.getColumnModel().getColumn(0).setPreferredWidth(15);
            tabelaEmprestimosAssociado.getColumnModel().getColumn(1).setPreferredWidth(90);
            tabelaEmprestimosAssociado.getColumnModel().getColumn(2).setPreferredWidth(70);
            tabelaEmprestimosAssociado.getColumnModel().getColumn(3).setPreferredWidth(300);
        }

        labelEmprestimos.setText("Empréstimo(s) em aberto:");

        jLabel3.setText("Data de hoje:");
        jLabel3.setToolTipText("Data do empréstimo");

        labelAno.setText("Ano");
        labelAno.setToolTipText("Data do empréstimo");

        jLabel5.setText("/");

        labelMes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelMes.setText("Mes");
        labelMes.setToolTipText("Data do empréstimo");

        jLabel4.setText("/");

        labelDia.setText("Dia");
        labelDia.setToolTipText("Data do empréstimo");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelDia)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelMes)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelAno))
                            .addComponent(labelEmprestimos))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(labelDia)
                    .addComponent(jLabel4)
                    .addComponent(labelMes)
                    .addComponent(jLabel5)
                    .addComponent(labelAno))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(labelEmprestimos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tCPFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tCPFFocusGained
        tCPF.setForeground(Color.black);
    }//GEN-LAST:event_tCPFFocusGained

    private void tCPFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tCPFFocusLost
        DefaultTableModel modelo = (DefaultTableModel) tabelaEmprestimosAssociado.getModel();
        try {
            lerArquivoAssociados();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao abrir arquivo de associados. Verifique se existe cadastros de associados.",
                    "Tela de erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            lerArquivo();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao abrir arquivo de emprestimos.",
                    "Tela de erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        for (int x = 0; x < associados.size(); x++) { //PERCORRE TODOS ASSOCIADOS
            if (associados.get(x).getCpfAssociado().equals(tCPF.getText())) {
                associado.setCpfAssociado(tCPF.getText());
                associado.setEmail(associados.get(x).getEmail());
                associado.setEndereco(associados.get(x).getEndereco());
                associado.setNome(associados.get(x).getNome());
                associado.setTelefone(associados.get(x).getTelefone());
                tNome.setText(associado.getNome());
                tTelefone.setText(associado.getTelefone());
                verificador = 0;
                break;
            }
        }
        if (verificador != 0) {
            JOptionPane.showMessageDialog(null, "Não foi encontrado o associado com CPF " + tCPF.getText() + ".\nDigite outro CPF.");
            labelCpf.setForeground(Color.RED);
            return;
        }
        for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
            modelo.removeRow(k);
        }
        for (int x = 0; x < emprestimos.size(); x++) { //PERCORRE TODOS OS EMPRESTIMOS
            if (emprestimos.get(x).getAssociado().getCpfAssociado().equals(associado.getCpfAssociado())) {
                Object[] llx = {emprestimos.get(x).getIdEmprestimo(), emprestimos.get(x).getDataEmprestimo().toString(),
                    emprestimos.get(x).getDataDevolucao().toString(), emprestimos.get(x).getExemplar().getTitulo()};
                modelo.addRow(llx);
            }
        }
    }//GEN-LAST:event_tCPFFocusLost

    private void tabelaEmprestimosAssociadoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tabelaEmprestimosAssociadoFocusGained
        labelEmprestimos.setForeground(Color.black);
    }//GEN-LAST:event_tabelaEmprestimosAssociadoFocusGained

    private void lerArquivo() throws Exception {
        ObjectInputStream arquivo = null;
        Emprestimo emprestimox = null;
        emprestimos.clear();
        try {
            arquivo = new ObjectInputStream(new FileInputStream("ArqEmprestimos.dad"));
            do {
                emprestimox = (Emprestimo) arquivo.readObject();
                emprestimos.add(emprestimox);
            } while (emprestimox != null);
        } catch (EOFException e) {
            arquivo.close();
        }
    }

    private void lerArquivoAssociados() throws Exception {
        ObjectInputStream arquivo = null;
        Associado associadox = null;
        associados.clear();
        try {
            arquivo = new ObjectInputStream(new FileInputStream("ArqAssociados.dad"));
            do {
                associadox = (Associado) arquivo.readObject();
                associados.add(associadox);
            } while (associadox != null);
        } catch (EOFException e) {
            arquivo.close();
        }
    }

    private void lerArquivoMultas() throws Exception {
        ObjectInputStream arquivo = null;
        Multa multax = null;
        multas.clear();
        try {
            arquivo = new ObjectInputStream(new FileInputStream("ArqMultas.dad"));
            do {
                multax = (Multa) arquivo.readObject();
                multas.add(multax);
            } while (multax != null);
        } catch (EOFException e) {
            arquivo.close();
        }
    }

    @Override
    public void bSalvarActionListener(ActionEvent evt) {
        int result;
        try {
            lerArquivoAssociados();
        } catch (Exception ex) {
        }
        try {
            lerArquivoMultas();
        } catch (Exception ex) {
        }
        if (tabelaEmprestimosAssociado.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "Selecione um exemplar para o empréstimo!", "SELECIONE UM EXEMPLAR",
                    JOptionPane.ERROR_MESSAGE);
            labelEmprestimos.setForeground(Color.red);
            return;
        }
        result = JOptionPane.showConfirmDialog(null, "Efetuar a devolução do exemplar: '"
                + tabelaEmprestimosAssociado.getValueAt(tabelaEmprestimosAssociado.getSelectedRow(), 3).toString()
                + "' emprestado para o associado '" + associado.getNome() + "' ?");
        if (result == 0) { //Resposta SIM
            int idt = 0;
            for (int i = 0; i < emprestimos.size(); i++) {
                if (emprestimos.get(i).getExemplar().getTitulo().equals(tabelaEmprestimosAssociado.getValueAt(
                        tabelaEmprestimosAssociado.getSelectedRow(), 3).toString())
                        && emprestimos.get(i).getAssociado().getCpfAssociado().equals(associado.getCpfAssociado())) {
                    valorDeMulta = calculaMulta(emprestimos.get(i).getDataDevolucao());
                    if (valorDeMulta > 0) {
                        for (int x = 0; x < multas.size(); x++) {
                            if (multas.get(x).getAssociado().getCpfAssociado().equals(associado.getCpfAssociado())) { //Ve se associado ja tem historico de multas
                                double novoValor = multas.get(x).getValorMulta() + valorDeMulta;
                                multas.get(x).setValorMulta(novoValor);
                                idt++;
                                break;
                            }
                        }
                        if (idt == 0) {
                            Multa novaMulta = new Multa();
                            novaMulta.setAssociado(associado);
                            novaMulta.setValorMulta(valorDeMulta);
                            multas.add(novaMulta);
                        }
                    }
                    emprestimos.remove(i);
                    break;
                }
            }
            JOptionPane.showMessageDialog(null, "Devolução efetuada com sucesso.", "DEVOLUÇÃO CONCLUÍDA",
                    JOptionPane.INFORMATION_MESSAGE);
            try {
                gravaArquivoMultas();
            } catch (Exception ex) {
                System.out.print(ex);
            }
            try {
                gravaArquivo();
            } catch (Exception ex) {
                System.out.print(ex);
            }
            LimpaCampos();
            result = JOptionPane.showConfirmDialog(null, "Deseja efetuar outra devolução?",
                    "OUTRA DEVOLUÇÃO", JOptionPane.YES_NO_OPTION);
            if (result == 1) { //RESPOSTA NÃO
                TelaInicial.max = 0;
                bSalvar.setText("SALVAR");
                this.dispose();
            }
        }

    }

    public double calculaMulta(DataX dataDevolucao) {
        // Data inicial
        Calendar dataInicio = Calendar.getInstance();
        // Atribui a data de 10/FEV/2008
        dataInicio.set((int) dataDevolucao.getAno(), (int) dataDevolucao.getMes() - 1, (int) dataDevolucao.getDia());
        // Data de hoje
        Calendar dataFinal = Calendar.getInstance();
//      dataFinal.set(2018,10,1);  
        // Calcula a diferença entre hoje e da data de inicio
        long diferenca = dataFinal.getTimeInMillis()
                - dataInicio.getTimeInMillis();
        // Quantidade de milissegundos em um dia
        int tempoDia = 1000 * 60 * 60 * 24;
        long diasDiferenca = diferenca / tempoDia;
        if (diasDiferenca > 0) { //Passou do prazo de 10 dias
            BigDecimal bd = new BigDecimal(diasDiferenca * (0.15)).setScale(2, RoundingMode.HALF_EVEN);
            JOptionPane.showMessageDialog(null, "Houve atraso na devolução. Será vinculado ao associado"
                    + "uma multa de R$0,15 ao dia de atraso. Total: R$" + bd.doubleValue() + "");
            return bd.doubleValue(); //R$0,15 por dia de atraso
        }
        return 0;
    }

    @Override
    public void bLimparActionListener(ActionEvent evt) {
        int result = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja limpar tudo?");
        if (result == 0) { //Resposta SIM
            LimpaCampos();
        }
    }

    @Override
    public void bSairActionListener(ActionEvent evt) {
        int result = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja sair da operação?",
                "SAIR", JOptionPane.YES_NO_OPTION);
        if (result == 0) {
            TelaInicial.max = 0;
            bSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/floppy-icon.png")));
            bSalvar.setText("Salvar");
            this.dispose();
        }
    }

    private void gravaArquivo() throws Exception {
        try {
            ObjectOutputStream arquivo = new ObjectOutputStream(new FileOutputStream("ArqEmprestimos.dad"));
            for (Emprestimo emprestimox : emprestimos) {
                arquivo.writeObject(emprestimox);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Erro ao gravar arquivo de emprestimos.", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void gravaArquivoLivros() throws Exception {
        try {
            ObjectOutputStream arquivo = new ObjectOutputStream(new FileOutputStream("ArqLivros.dad"));
            for (Livro livrox : livros) {
                arquivo.writeObject(livrox);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Erro ao gravar arquivo.", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void gravaArquivoMultas() throws Exception {
        try {
            ObjectOutputStream arquivo = new ObjectOutputStream(new FileOutputStream("ArqMultas.dad"));
            for (Multa multax : multas) {
                arquivo.writeObject(multax);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Erro ao gravar arquivo.", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void gravaArquivoRevistas() throws Exception {
        try {
            ObjectOutputStream arquivo = new ObjectOutputStream(new FileOutputStream("ArqRevistas.dad"));
            for (Revista revistax : revistas) {
                arquivo.writeObject(revistax);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Erro ao gravar arquivo.", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void lerArquivoLivros() throws Exception {
        ObjectInputStream arquivo = null;
        Livro livrox = null;
        livros.clear();
        try {
            arquivo = new ObjectInputStream(new FileInputStream("ArqLivros.dad"));
            do {
                livrox = (Livro) arquivo.readObject();
                livros.add(livrox);
            } while (livrox != null);
        } catch (EOFException e) {
            arquivo.close();
        }
    }

    private void lerArquivoRevistas() throws Exception {
        ObjectInputStream arquivo = null;
        Revista revistax = null;
        revistas.clear();
        try {
            arquivo = new ObjectInputStream(new FileInputStream("ArqRevistas.dad"));
            do {
                revistax = (Revista) arquivo.readObject();
                revistas.add(revistax);
            } while (revistax != null);
        } catch (EOFException e) {
            arquivo.close();
        }
    }

    public void LimpaCampos() {
        DefaultTableModel modelo = (DefaultTableModel) tabelaEmprestimosAssociado.getModel();
        tCPF.setText("");
        livro = null;
        revista = null;
        tNome.setText("");
        tTelefone.setText("");
        associado = new Associado();
        for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
            modelo.removeRow(k);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelAno;
    private javax.swing.JLabel labelCpf;
    private javax.swing.JLabel labelDia;
    private javax.swing.JLabel labelEmprestimos;
    private javax.swing.JLabel labelMes;
    private javax.swing.JFormattedTextField tCPF;
    private javax.swing.JTextField tNome;
    private javax.swing.JTextField tTelefone;
    private javax.swing.JTable tabelaEmprestimosAssociado;
    // End of variables declaration//GEN-END:variables

}
