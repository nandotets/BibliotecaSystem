/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfaceGrafica;

import TipoDados.Livro;
import TipoDados.CustomRenderer;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.io.EOFException;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 * a
 *
 * @author Fernando TeTz
 */
public class TelaManutençãoLivro extends ModeloManutenção {

    ArrayList<Livro> livros = new ArrayList<>();
    public static Livro livro;
    String pesquisa[] = {"Título", "ISBN", "Autor", "Editora"};

    public TelaManutençãoLivro() throws Exception {
        try {
            lerArquivo();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Arquivo 'ArqLivros.dad' não encontrado. Um novo arquivo será criado.",
                    "Tela de erro", JOptionPane.ERROR_MESSAGE);
            gravaArquivo();
        }
        montaCombo();
        initComponents();
        tabelaLivros.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tabelaLivros.getColumnModel().getColumn(6).setCellRenderer(new CustomRenderer());
        tabelaLivros.setRowHeight(70);
        tPesquisa.setSize(6, 35);
    }

    private void montaCombo() {
        cbPesquisa.removeAllItems();
        for (String pesquisa1 : pesquisa) {
            cbPesquisa.addItem(pesquisa1);
        }
        cbPesquisa.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaLivros = new javax.swing.JTable();

        setResizable(true);
        setTitle("Manutenção de livros");

        tabelaLivros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "ISBN", "Título", "Editora", "Local de edição", "Quantidade", "Autores"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaLivros.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tabelaLivros.getTableHeader().setReorderingAllowed(false);
        tabelaLivros.getColumnModel().getColumn(0).setPreferredWidth(100);
        tabelaLivros.getColumnModel().getColumn(1).setPreferredWidth(200);
        jScrollPane1.setViewportView(tabelaLivros);
        if (tabelaLivros.getColumnModel().getColumnCount() > 0) {
            tabelaLivros.getColumnModel().getColumn(0).setResizable(false);
            tabelaLivros.getColumnModel().getColumn(0).setPreferredWidth(40);
            tabelaLivros.getColumnModel().getColumn(1).setPreferredWidth(100);
            tabelaLivros.getColumnModel().getColumn(2).setPreferredWidth(150);
            tabelaLivros.getColumnModel().getColumn(4).setResizable(false);
            tabelaLivros.getColumnModel().getColumn(4).setPreferredWidth(100);
            tabelaLivros.getColumnModel().getColumn(5).setResizable(false);
            tabelaLivros.getColumnModel().getColumn(5).setPreferredWidth(85);
            tabelaLivros.getColumnModel().getColumn(6).setMinWidth(250);
            tabelaLivros.getColumnModel().getColumn(6).setPreferredWidth(250);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(57, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lerArquivo() throws Exception {
        Livro livrox = null;
        livros.clear();
        ObjectInputStream arquivo = null;
        try {
            arquivo = new ObjectInputStream(new FileInputStream("ArqLivros.dad"));
            do {
                livrox = (Livro) arquivo.readObject();
                livros.add(livrox);
            } while (livrox != null);
        } catch (EOFException e) {
            arquivo.close();
        }
    }

    @Override
    public void bNovoActionListener(ActionEvent evt) {
        DefaultTableModel modelo = (DefaultTableModel) tabelaLivros.getModel();
        Object autorx = null;
        TelaAdicionarLivro telaedit = new TelaAdicionarLivro();
        telaedit.setVisible(true);
        for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
            modelo.removeRow(k);
        }
        try {
            lerArquivo();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao ler arquivo.", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
        for (int x = 0; x < livros.size(); x++) { //Percorre todos os livros
            autorx = livros.get(x).getAutoria().get(0).toString();
            for (int i = 1; i < livros.get(x).getAutoria().size(); i++) { //Percorre toda a autoria de um livro
                autorx = autorx + livros.get(x).getAutoria().get(i).toString();
            }
            Object[] linhax = {livros.get(x).getIDAcervo(), livros.get(x).getISBN(),
                livros.get(x).getTitulo(), livros.get(x).getEditora().getRazaoSocial(), livros.get(x).getLocalEdicao(), livros.get(x).getQtdeExemplar(),
                autorx};
            modelo.addRow(linhax);
        }
    }

    @Override
    public void bEditarActionListener(ActionEvent evt) {
        DefaultTableModel modelo = (DefaultTableModel) tabelaLivros.getModel();
        Object autorx = null;
        int linha = tabelaLivros.getSelectedRow();
        if (linha == -1) {
            JOptionPane.showMessageDialog(null, "Nenhum livro selecionado.\n"
                    + "Por favor selecione um livro para ser editado.", "ERRO", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int idEdit = Integer.parseInt(modelo.getValueAt(linha, 0).toString());
        for (int x = 0; x < livros.size(); x++) {
            if (livros.get(x).getIDAcervo() == idEdit) {
                TelaManutençãoLivro.livro = livros.get(x);
                break;
            }
        }
            TelaEditarLivro telaedit = new TelaEditarLivro();
            telaedit.setVisible(true);
        try {
            lerArquivo();
        } catch (Exception ex) {
        }
        for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
            modelo.removeRow(k);
        }
        for (int x = 0; x < livros.size(); x++) {
            autorx = livros.get(x).getAutoria().get(0).toString();
            for (int i = 1; i < livros.get(x).getAutoria().size(); i++) { //Percorre toda a autoria de um livro
                autorx = autorx + livros.get(x).getAutoria().get(i).toString();
            }
            Object[] linhax = {livros.get(x).getIDAcervo(), livros.get(x).getISBN(),
                livros.get(x).getTitulo(), livros.get(x).getEditora().getRazaoSocial(), livros.get(x).getLocalEdicao(),
                livros.get(x).getQtdeExemplar(), autorx};
            modelo.addRow(linhax);
        }
    }

    public static Livro getLivro() {
        return livro;
    }

    @Override
    public void bSairActionListener(ActionEvent evt) {
        int result;
        try {
            result = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja sair?", "SAIR", JOptionPane.YES_NO_OPTION);
            if (result == 0) {
                TelaInicial.max = 0;
                this.dispose();
            }
        } catch (HeadlessException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Tela de erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    @Override
    public void txPesquisa() {
        Object autorx = null;
        try {
            lerArquivo();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao abrir arquivo", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
        int tipoPesquisa = cbPesquisa.getSelectedIndex();
        DefaultTableModel modelo = (DefaultTableModel) tabelaLivros.getModel();
        for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
            modelo.removeRow(k);
        }
        switch (tipoPesquisa) {
            case 0: //Pesquisa por titulo
                for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
                    modelo.removeRow(k);
                }
                if (!(tPesquisa.getText().isEmpty())) {
                    for (int x = 0; x < livros.size(); x++) {
                        if (livros.get(x).getTitulo().contains(tPesquisa.getText())) {
                            autorx = livros.get(x).getAutoria().get(0).toString();
                            for (int i = 1; i < livros.get(x).getAutoria().size(); i++) { //Percorre toda a autoria de um livro
                                autorx = autorx + livros.get(x).getAutoria().get(i).toString();
                            }
                            Object[] linhax = {livros.get(x).getIDAcervo(), livros.get(x).getISBN(),
                                livros.get(x).getTitulo(), livros.get(x).getEditora().getRazaoSocial(), livros.get(x).getLocalEdicao(), livros.get(x).getQtdeExemplar(),
                                autorx};
                            modelo.addRow(linhax);
                        }
                    }
                }
                break;
            case 1: //Pesquisa por ISBN
                for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
                    modelo.removeRow(k);
                }
                if (!(tPesquisa.getText().isEmpty())) {
                    for (int x = 0; x < livros.size(); x++) {
                        if (livros.get(x).getISBN().contains(tPesquisa.getText())) {
                            autorx = livros.get(x).getAutoria().get(0).toString();
                            for (int i = 1; i < livros.get(x).getAutoria().size(); i++) { //Percorre toda a autoria de um livro
                                autorx = autorx + livros.get(x).getAutoria().get(i).toString();
                            }
                            Object[] linhax = {livros.get(x).getIDAcervo(), livros.get(x).getISBN(),
                                livros.get(x).getTitulo(), livros.get(x).getEditora().getRazaoSocial(), livros.get(x).getLocalEdicao(), livros.get(x).getQtdeExemplar(),
                                autorx};
                            modelo.addRow(linhax);
                        }
                    }
                }
                break;
            case 2: //Pesquisa por Autor
                for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
                    modelo.removeRow(k);
                }
                if (!(tPesquisa.getText().isEmpty())) {
                    for (int x = 0; x < livros.size(); x++) {
                        for (int y = 0; y < livros.get(x).getAutoria().size(); y++) {
                            if (((livros.get(x)).getAutoria().get(y)).getNome().contains(tPesquisa.getText())) {
                                autorx = livros.get(x).getAutoria().get(0).toString();
                                for (int i = 1; i < livros.get(x).getAutoria().size(); i++) { //Percorre toda a autoria de um livro
                                    autorx = autorx + livros.get(x).getAutoria().get(i).toString();
                                }
                                Object[] linhax = {livros.get(x).getIDAcervo(), livros.get(x).getISBN(),
                                    livros.get(x).getTitulo(), livros.get(x).getEditora().getRazaoSocial(), livros.get(x).getLocalEdicao(), livros.get(x).getQtdeExemplar(),
                                    autorx};
                                modelo.addRow(linhax);
                            }
                        }

                    }
                }
                break;
            case 3: //Pesquisa por Editora
                for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
                    modelo.removeRow(k);
                }
                if (!(tPesquisa.getText().isEmpty())) {
                    for (int x = 0; x < livros.size(); x++) {
                        if (livros.get(x).getEditora().getRazaoSocial().contains(tPesquisa.getText())) {
                            autorx = livros.get(x).getAutoria().get(0).toString();
                            for (int i = 1; i < livros.get(x).getAutoria().size(); i++) { //Percorre toda a autoria de um livro
                                autorx = autorx + livros.get(x).getAutoria().get(i).toString();
                            }
                            Object[] linhax = {livros.get(x).getIDAcervo(), livros.get(x).getISBN(),
                                livros.get(x).getTitulo(), livros.get(x).getEditora().getRazaoSocial(), livros.get(x).getLocalEdicao(), livros.get(x).getQtdeExemplar(),
                                autorx};
                            modelo.addRow(linhax);
                        }
                    }
                }
                break;
        }
    }

    @Override
    public void bMostrarTodosActionListener(ActionEvent evt) {
        DefaultTableModel modelo = (DefaultTableModel) tabelaLivros.getModel();

        try {
            lerArquivo();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Não existe cadastros de livros.", "Não encontrado", JOptionPane.ERROR_MESSAGE);
        }
        for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
            modelo.removeRow(k);
        }
        Object autorx = null;
        for (int x = 0; x < livros.size(); x++) { //Percorre todos os livros
            autorx = livros.get(x).getAutoria().get(0).toString();
            for (int i = 1; i < livros.get(x).getAutoria().size(); i++) { //Percorre toda a autoria de um livro
                autorx = autorx + livros.get(x).getAutoria().get(i).toString();
            }
            Object[] linhax = {livros.get(x).getIDAcervo(), livros.get(x).getISBN(),
                livros.get(x).getTitulo(), livros.get(x).getEditora().getRazaoSocial(), livros.get(x).getLocalEdicao(), livros.get(x).getQtdeExemplar(),
                autorx};
            modelo.addRow(linhax);
        }
    }

    @Override
    public void bLimparTudoActionListener(ActionEvent evt) {
        DefaultTableModel modelo = (DefaultTableModel) tabelaLivros.getModel();

        for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
            modelo.removeRow(k);
        }
        tabelaLivros.setModel(modelo);
        tPesquisa.setText("");
    }

    public void limpaTudo() {
        DefaultTableModel modelo = (DefaultTableModel) tabelaLivros.getModel();

        for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
            modelo.removeRow(k);
        }
        tabelaLivros.setModel(modelo);
        tPesquisa.setText("");
        tabelaLivros.updateUI();
    }

    @Override
    public void bExcluirActionListener(ActionEvent evt) {
        try {
            lerArquivo();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao ler arquivo.", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
        DefaultTableModel modelo = (DefaultTableModel) tabelaLivros.getModel();
        int linha = tabelaLivros.getSelectedRow();
        if (linha == -1) {
            JOptionPane.showMessageDialog(null, "Nenhuma livro selecionado.\n"
                    + "Por favor selecione um livro para ser excluído.", "ERRO", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int idRemove = Integer.parseInt(modelo.getValueAt(linha, 0).toString());
        for (int x = 0; x < livros.size(); x++) {
            if (livros.get(x).getIDAcervo() == idRemove) {
                int result = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja excluir '"
                        + livros.get(x).getTitulo() + "' ?", "EXCLUIR LIVRO", JOptionPane.YES_NO_OPTION);
                if (result == 0) {
                    JOptionPane.showMessageDialog(null, "Livro '" + livros.get(x).getTitulo()
                            + "' excluído com sucesso.", "EXCLUIR LIVRO", JOptionPane.INFORMATION_MESSAGE);
                    livros.remove(x);
                    try {
                        gravaArquivo();
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, "Erro ao gravar no arquivo.", "ERRO", JOptionPane.ERROR_MESSAGE);
                    }
                    break;
                }
            }
        }
        limpaTudo();
        try {
            lerArquivo();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao ler arquivo.", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
        String autorx = null;
        for (int x = 0; x < livros.size(); x++) { //Percorre todos os livros
            autorx = livros.get(x).getAutoria().get(0).toString();
            for (int i = 1; i < livros.get(x).getAutoria().size(); i++) { //Percorre toda a autoria de um livro
                autorx = autorx + livros.get(x).getAutoria().get(i).toString();
            }
            Object[] linhax = {livros.get(x).getIDAcervo(), livros.get(x).getISBN(),
                livros.get(x).getTitulo(), livros.get(x).getEditora().getRazaoSocial(), livros.get(x).getLocalEdicao(), livros.get(x).getQtdeExemplar(),
                autorx};
            modelo.addRow(linhax);
        }
    }

    private void gravaArquivo() throws Exception {
        try (ObjectOutputStream arquivo = new ObjectOutputStream(new FileOutputStream("ArqLivros.dad"))) {
            for (Livro livrox : livros) {
                arquivo.writeObject(livrox);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable tabelaLivros;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mudouCB() {
    }

}
