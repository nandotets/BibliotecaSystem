/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfaceGrafica;

import TipoDados.Associado;
import TipoDados.CustomRenderer;
import java.awt.event.ActionEvent;
import java.io.EOFException;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 * a
 *
 * @author Fernando TeTz
 */
public class TelaManutençãoAssociado extends ModeloManutenção {

    ArrayList<Associado> associados = new ArrayList<>();
    public static Associado associado;
    String pesquisa[] = {"Nome", "Email", "CPF"};

    public TelaManutençãoAssociado() throws Exception {
        try {
            lerArquivo();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Arquivo 'ArqAssociados.dad' não encontrado. Um novo arquivo será criado.",
                    "Tela de erro", JOptionPane.ERROR_MESSAGE);
            gravaArquivo();
        }
        montaCombo();
        initComponents();
        tabelaAssociados.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tabelaAssociados.getColumnModel().getColumn(4).setCellRenderer(new CustomRenderer());
        tabelaAssociados.setRowHeight(45);
        associado = new Associado();
        tPesquisa.setSize(6, 35);
    }

    private void montaCombo() {
        cbPesquisa.removeAllItems();
        for (String pesquisa1 : pesquisa) {
            cbPesquisa.addItem(pesquisa1);
        }
        cbPesquisa.setSelectedIndex(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaAssociados = new javax.swing.JTable();

        setResizable(true);
        setTitle("Manutenção de associados");

        tabelaAssociados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CPF", "Nome", "Telefone", "Email", "Endereço"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaAssociados.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tabelaAssociados.getTableHeader().setReorderingAllowed(false);
        tabelaAssociados.getColumnModel().getColumn(0).setPreferredWidth(100);
        tabelaAssociados.getColumnModel().getColumn(1).setPreferredWidth(200);
        jScrollPane1.setViewportView(tabelaAssociados);
        if (tabelaAssociados.getColumnModel().getColumnCount() > 0) {
            tabelaAssociados.getColumnModel().getColumn(0).setResizable(false);
            tabelaAssociados.getColumnModel().getColumn(0).setPreferredWidth(100);
            tabelaAssociados.getColumnModel().getColumn(2).setResizable(false);
            tabelaAssociados.getColumnModel().getColumn(2).setPreferredWidth(100);
            tabelaAssociados.getColumnModel().getColumn(3).setPreferredWidth(150);
            tabelaAssociados.getColumnModel().getColumn(4).setPreferredWidth(400);
        }

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(57, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lerArquivo() throws Exception {
        Associado associadox = null;
        associados.clear();
        ObjectInputStream arquivo = null;
        try {
            arquivo = new ObjectInputStream(new FileInputStream("ArqAssociados.dad"));
            do {
                associadox = (Associado) arquivo.readObject();
                associados.add(associadox);
            } while (associadox != null);
        } catch (EOFException e) {
            arquivo.close();
        }
    }

    @Override
    public void bNovoActionListener(ActionEvent evt) {
        DefaultTableModel modelo = (DefaultTableModel) tabelaAssociados.getModel();
        TelaAdicionarAssociado telaedit = new TelaAdicionarAssociado();
        telaedit.setVisible(true);
        try {
            lerArquivo();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao ler arquivo.", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
        for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
            modelo.removeRow(k);
        }

        for (int x = 0; x < associados.size(); x++) {
            String[] linhax = {associados.get(x).getCpfAssociado(), associados.get(x).getNome(),
                associados.get(x).getTelefone(), associados.get(x).getEmail(), associados.get(x).getEndereco().toString()};
            modelo.addRow(linhax);
        }
    }

    @Override
    public void bEditarActionListener(ActionEvent evt) {
        DefaultTableModel modelo = (DefaultTableModel) tabelaAssociados.getModel();
        int linha = tabelaAssociados.getSelectedRow();
        if (linha == -1) {
            JOptionPane.showMessageDialog(null, "Nenhuma associado selecionado.\n"
                    + "Por favor selecione um associado para ser editado.", "ERRO", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String cpfEdit = modelo.getValueAt(linha, 0).toString();
        for (int x = 0; x < associados.size(); x++) {
            if (associados.get(x).getCpfAssociado().equals(cpfEdit)) {
                associado = associados.get(x);
                break;
            }
        }
        try {
            TelaEditarAssociado telaedit = new TelaEditarAssociado();
            telaedit.setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao abrir tela de editar associado." + ex.getMessage(),
                    "Tela de erro", JOptionPane.ERROR_MESSAGE);
        }

        try {
            lerArquivo();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao ler arquivo.", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
        for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
            modelo.removeRow(k);
        }

        for (int x = 0; x < associados.size(); x++) {
            String[] linhax = {associados.get(x).getCpfAssociado(), associados.get(x).getNome(),
                associados.get(x).getTelefone(), associados.get(x).getEmail(), associados.get(x).getEndereco().toString()};
            modelo.addRow(linhax);
        }
    }

    public static Associado getAssociado() {
        return associado;
    }

    @Override
    public void bSairActionListener(ActionEvent evt) {
        int result;
        try {
            result = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja sair?", "SAIR", JOptionPane.YES_NO_OPTION);
            if (result == 0) {
                TelaInicial.max = 0;
                this.dispose();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Tela de erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    @Override
    public void txPesquisa() {
        try {
            lerArquivo();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Nenhum associado cadastrado.", "NÃO ENCONTRADO", JOptionPane.ERROR_MESSAGE);
        }
        int tipoPesquisa = cbPesquisa.getSelectedIndex();
        DefaultTableModel modelo = (DefaultTableModel) tabelaAssociados.getModel();
        for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
            modelo.removeRow(k);
        }
        switch (tipoPesquisa) {
            case 0: //Pesquisa por nome
                for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
                    modelo.removeRow(k);
                }
                if (!(tPesquisa.getText().isEmpty())) {
                    for (int x = 0; x < associados.size(); x++) {
                        if (associados.get(x).getNome().contains(tPesquisa.getText())) {
                            String[] linhax = {associados.get(x).getCpfAssociado(), associados.get(x).getNome(),
                                associados.get(x).getTelefone(), associados.get(x).getEmail(),
                                associados.get(x).getEndereco().toString()};
                            modelo.addRow(linhax);
                        }
                    }
                }
                break;
            case 1: //Pesquisa por email
                for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
                    modelo.removeRow(k);
                }
                if (!(tPesquisa.getText().isEmpty())) {
                    for (int x = 0; x < associados.size(); x++) {
                        if (associados.get(x).getEmail().contains(tPesquisa.getText())) {
                            String[] linhax = {associados.get(x).getCpfAssociado(), associados.get(x).getNome(),
                                associados.get(x).getTelefone(), associados.get(x).getEmail(),
                                associados.get(x).getEndereco().toString()};
                            modelo.addRow(linhax);
                        }
                    }
                }
                break;
            case 2: //Pesquisa por CPF
                for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
                    modelo.removeRow(k);
                }
                String str = "";
                if ((!(tPesquisa.getText().isEmpty())) || tPesquisa.getText().length() >= 11) { //preencheu somente numeros
                    StringBuilder stringConvertida = new StringBuilder(tPesquisa.getText());
                    stringConvertida.insert(tPesquisa.getText().length() - 8, ".");//391.59899832
                    stringConvertida.insert(tPesquisa.getText().length() - 5, ".");//391.598.99832
                    stringConvertida.insert(tPesquisa.getText().length() - 2, "-");//391.598.998-32
                    str = stringConvertida.toString();
                }
                for (int x = 0; x < associados.size(); x++) {
                    if (associados.get(x).getCpfAssociado().equals(tPesquisa.getText())
                            || associados.get(x).getCpfAssociado().equals(str)) {
                        String[] linhax = {associados.get(x).getCpfAssociado(), associados.get(x).getNome(),
                            associados.get(x).getTelefone(), associados.get(x).getEmail(),
                            associados.get(x).getEndereco().toString()};
                        modelo.addRow(linhax);
                    }
                }
                break;
        }
    }

    @Override
    public void bMostrarTodosActionListener(ActionEvent evt) {
        DefaultTableModel modelo = (DefaultTableModel) tabelaAssociados.getModel();
        try {
            lerArquivo();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao ler arquivo.", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
        for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
            modelo.removeRow(k);
        }

        for (int x = 0; x < associados.size(); x++) {
            String[] linhax = {associados.get(x).getCpfAssociado(), associados.get(x).getNome(),
                associados.get(x).getTelefone(), associados.get(x).getEmail(), associados.get(x).getEndereco().toString()};
            modelo.addRow(linhax);
        }
    }

    @Override
    public void bLimparTudoActionListener(ActionEvent evt) {
        DefaultTableModel modelo = (DefaultTableModel) tabelaAssociados.getModel();

        for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
            modelo.removeRow(k);
        }
        tPesquisa.setText("");
    }

    @Override
    public void bExcluirActionListener(ActionEvent evt) {
        try {
            lerArquivo();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao ler arquivo.", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
        DefaultTableModel modelo = (DefaultTableModel) tabelaAssociados.getModel();
        int linha = tabelaAssociados.getSelectedRow();
        if (linha == -1) {
            JOptionPane.showMessageDialog(null, "Nenhuma associado selecionado.\n"
                    + "Por favor selecione um associado para ser excluído.", "ERRO", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String cpfRemove = modelo.getValueAt(linha, 0).toString();
        for (int x = 0; x < associados.size(); x++) {
            if (associados.get(x).getCpfAssociado().equals(cpfRemove)) {
                int result = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja excluir '"
                        + associados.get(x).getNome() + "' ?", "EXCLUIR ASSOCIADO", JOptionPane.YES_NO_OPTION);
                if (result == 0) {
                    JOptionPane.showMessageDialog(null, "Associado '" + associados.get(x).getNome()
                            + "' excluído com sucesso.", "EXCLUIR AUTOR", JOptionPane.INFORMATION_MESSAGE);
                    associados.remove(x);
                    try {
                        gravaArquivo();
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, "Erro ao gravar no arquivo.", "ERRO", JOptionPane.ERROR_MESSAGE);
                    }
                    break;
                }
            }
        }
        for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
            modelo.removeRow(k);
        }
        for (int x = 0; x < associados.size(); x++) {
            String[] linhax = {associados.get(x).getCpfAssociado(), associados.get(x).getNome(),
                associados.get(x).getTelefone(), associados.get(x).getEmail(),
                associados.get(x).getEndereco().toString()};
            modelo.addRow(linhax);
        }
    }

    private void gravaArquivo() throws Exception {
        try (ObjectOutputStream arquivo = new ObjectOutputStream(new FileOutputStream("ArqAssociados.dad"))) {
            for (Associado associadox : associados) {
                arquivo.writeObject(associadox);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTable tabelaAssociados;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mudouCB() {
    }

}
