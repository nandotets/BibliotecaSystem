/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfaceGrafica;

import TipoDados.Associado;
import TipoDados.DataX;
import TipoDados.Emprestimo;
import TipoDados.Livro;
import TipoDados.Multa;
import TipoDados.Revista;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.io.EOFException;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * a
 *
 * @author Fernando TeTz
 */
public class TelaEfetuarEmprestimo extends ModeloEmprestimos {

    ArrayList<Associado> associados = new ArrayList<>();
    ArrayList<Associado> listaEspera = new ArrayList<>();
    ArrayList<Emprestimo> emprestimos = new ArrayList<>();
    ArrayList<Livro> livros = new ArrayList<>();
    ArrayList<Revista> revistas = new ArrayList<>();
    ArrayList<Multa> multas = new ArrayList<>();
    Associado associado = new Associado();
    Emprestimo emprestimo = null;
    public static Livro livro = null;
    public static Revista revista = null;
    public static int identif = 0;
    Calendar calendar = new GregorianCalendar(), calendar10 = new GregorianCalendar();
    Date trialTime = new Date();
    int verificador = -1;
    String[] meses = {"Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho",
        "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"};
    DataX dataAtual = null, data10 = null;
    int qntdEmprestadosRev = 0, qntdEmprestadosLiv = 0;

    public TelaEfetuarEmprestimo() throws Exception {
        try {
            lerArquivoAssociados();
        } catch (Exception ee) {
            JOptionPane.showMessageDialog(null, "Arquivo 'ArqAssociados.dad' não encontrado.\nVá à manutenção de associados.",
                    "Tela de erro", JOptionPane.ERROR_MESSAGE);
        }
        try {
            lerArquivo();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Arquivo 'ArqEmprestimos.dad' não encontrado. Um novo arquivo será criado.",
                    "Tela de erro", JOptionPane.ERROR_MESSAGE);
            gravaArquivo();
        }
        initComponents();
        calendar.setTime(trialTime);
        calendar10.setTime(trialTime);
        calendar10.set(Calendar.DATE, calendar10.get(Calendar.DATE) + 10);
        labelDia.setText(Integer.toString(calendar.get(Calendar.DAY_OF_MONTH)));
        labelMes.setText(meses[calendar.get(Calendar.MONTH)]);
        labelAno.setText(Integer.toString(calendar.get(Calendar.YEAR)));
        labelDia1.setText(Integer.toString(calendar10.get(Calendar.DAY_OF_MONTH)));
        labelMes1.setText(meses[calendar10.get(Calendar.MONTH)]);
        labelAno1.setText(Integer.toString(calendar10.get(Calendar.YEAR)));
        dataAtual = new DataX((byte) calendar.get(Calendar.DAY_OF_MONTH),
                (byte) (calendar.get(Calendar.MONTH) + 1), (short) calendar.get(Calendar.YEAR));
        data10 = new DataX((byte) calendar10.get(Calendar.DAY_OF_MONTH),
                (byte) (calendar10.get(Calendar.MONTH) + 1), (short) calendar10.get(Calendar.YEAR));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        tCPF = new javax.swing.JFormattedTextField();
        labelCpf = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaEmprestimosAssociado = new javax.swing.JTable();
        tNome = new javax.swing.JTextField();
        tTelefone = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        labelDia = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        labelMes = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        labelAno = new javax.swing.JLabel();
        labelExemplar = new javax.swing.JLabel();
        tExemplar = new javax.swing.JTextField();
        bBuscarExemplar = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        labelAno1 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        labelMes1 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        labelDia1 = new javax.swing.JLabel();

        setResizable(true);
        setTitle("Efetuar empréstimo");
        setToolTipText("");
        setFrameIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/icone.png"))); // NOI18N

        jPanel1.setToolTipText("");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados do associado"));
        jPanel2.setToolTipText("");

        try {
            tCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        tCPF.setToolTipText("Digite o CPF do associado");
        tCPF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tCPFFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tCPFFocusLost(evt);
            }
        });

        labelCpf.setText("* CPF:");

        jLabel1.setText("Nome:");

        jLabel2.setText("Telefone:");

        jLabel6.setText("Empréstimo(s) em aberto:");

        tabelaEmprestimosAssociado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Data Empréstimo", "Devolução"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaEmprestimosAssociado.setToolTipText("Tabela de emprestimos do associado");
        jScrollPane1.setViewportView(tabelaEmprestimosAssociado);
        if (tabelaEmprestimosAssociado.getColumnModel().getColumnCount() > 0) {
            tabelaEmprestimosAssociado.getColumnModel().getColumn(0).setResizable(false);
            tabelaEmprestimosAssociado.getColumnModel().getColumn(0).setPreferredWidth(15);
            tabelaEmprestimosAssociado.getColumnModel().getColumn(1).setPreferredWidth(70);
            tabelaEmprestimosAssociado.getColumnModel().getColumn(2).setPreferredWidth(70);
        }

        tNome.setToolTipText("Nome do associado");
        tNome.setEnabled(false);

        tTelefone.setToolTipText("Telefone do associado");
        tTelefone.setEnabled(false);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(labelCpf)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tNome, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 138, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(72, 72, 72))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 7, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCpf)
                    .addComponent(tCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(tTelefone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );

        jLabel3.setText("Data:");
        jLabel3.setToolTipText("Data do empréstimo");

        labelDia.setText("Dia");
        labelDia.setToolTipText("Data do empréstimo");

        jLabel4.setText("/");

        labelMes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelMes.setText("Mes");
        labelMes.setToolTipText("Data do empréstimo");

        jLabel5.setText("/");

        labelAno.setText("Ano");
        labelAno.setToolTipText("Data do empréstimo");

        labelExemplar.setText("Exemplar:");

        tExemplar.setToolTipText("Nome do exemplar");
        tExemplar.setEnabled(false);

        bBuscarExemplar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagens/buscarExemplar.png"))); // NOI18N
        bBuscarExemplar.setText("Buscar exemplar");
        bBuscarExemplar.setToolTipText("Buscar um exemplar do acervo");
        bBuscarExemplar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bBuscarExemplarActionPerformed(evt);
            }
        });

        jLabel9.setText("Data de devolução máxima:");
        jLabel9.setToolTipText("Data máxima para devolução");

        labelAno1.setText("Ano");
        labelAno1.setToolTipText("Data máxima para devolução");

        jLabel10.setText("/");

        labelMes1.setText("Mes");
        labelMes1.setToolTipText("Data máxima para devolução");

        jLabel11.setText("/");

        labelDia1.setText("Dia");
        labelDia1.setToolTipText("Data máxima para devolução");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelDia1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelMes1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelAno1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelDia)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelMes)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelAno))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(labelExemplar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tExemplar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bBuscarExemplar)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(labelDia)
                    .addComponent(jLabel4)
                    .addComponent(labelMes)
                    .addComponent(jLabel5)
                    .addComponent(labelAno))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelExemplar)
                    .addComponent(tExemplar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bBuscarExemplar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelDia1)
                        .addComponent(jLabel11)
                        .addComponent(labelMes1)
                        .addComponent(jLabel10)
                        .addComponent(labelAno1))
                    .addComponent(jLabel9))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tCPFFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tCPFFocusGained
        labelCpf.setForeground(Color.black);
    }//GEN-LAST:event_tCPFFocusGained

    private void tCPFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tCPFFocusLost
        int contador = 0;
        DefaultTableModel modelo = (DefaultTableModel) tabelaEmprestimosAssociado.getModel();
        try {
            lerArquivoAssociados();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao abrir arquivo de associados. Verifique se existe cadastros de associados.",
                    "Tela de erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            lerArquivo();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao abrir arquivo de emprestimos.",
                    "Tela de erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            lerArquivoMultas();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao abrir arquivo de multas.",
                    "Tela de erro", JOptionPane.ERROR_MESSAGE);
            return;
        }
        for (int x = 0; x < associados.size(); x++) { //PERCORRE TODOS ASSOCIADOS
            if (associados.get(x).getCpfAssociado().equals(tCPF.getText())) {
                associado.setCpfAssociado(tCPF.getText());
                associado.setEmail(associados.get(x).getEmail());
                associado.setEndereco(associados.get(x).getEndereco());
                associado.setNome(associados.get(x).getNome());
                associado.setTelefone(associados.get(x).getTelefone());
                tNome.setText(associado.getNome());
                tTelefone.setText(associado.getTelefone());
                verificador = 0;
                break;
            }
        }
        if (verificador != 0) {
            if (tCPF.getText().equals("   .   .   -  ")) {
                JOptionPane.showMessageDialog(null, "Digite o CPF do associado! ",
                        "CPF INVÁLIDO", JOptionPane.ERROR_MESSAGE);
                labelCpf.setForeground(Color.red);
                verificador = -1;
                return;
            }

            JOptionPane.showMessageDialog(null, "Não foi encontrado o associado com CPF " + tCPF.getText() + ".\nDigite outro CPF.",
                    "CPF NÃO ENCONTRADO", JOptionPane.ERROR_MESSAGE);
            verificador = -1;
            LimpaCampos();
            return;
        }
        for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
            modelo.removeRow(k);
        }
        for (int x = 0; x < emprestimos.size(); x++) { //PERCORRE TODOS OS EMPRESTIMOS
            if (emprestimos.get(x).getAssociado().getCpfAssociado().equals(associado.getCpfAssociado())) {
                Object[] llx = {emprestimos.get(x).getIdEmprestimo(), emprestimos.get(x).getDataEmprestimo().toString(),
                    emprestimos.get(x).getDataDevolucao().toString()};
                modelo.addRow(llx);
                contador++;
            }
            if (contador >= 3) {
                JOptionPane.showMessageDialog(null, "O associado '" + associado.getNome() + "' já possui o máximo de empréstimos"
                        + "em aberto (3). O mesmo deve efetuar uma devolução para efetuar outro empréstimo.");
                verificador = -2;
                return;
            }
        }
        for (int x = 0; x < multas.size(); x++) { //PERCORRE TODAS AS MULTAS
            if (multas.get(x).getAssociado().getCpfAssociado().equals(associado.getCpfAssociado())
                    && multas.get(x).getValorMulta() > 0) {
                JOptionPane.showMessageDialog(null, "O associado '" + associado.getNome() + "' possui multas pendentes. Para efetuar"
                        + "um novo empréstimo o mesmo deve efetuar o pagamento da multa.");
                verificador = -3;
                return;
            }
        }
    }//GEN-LAST:event_tCPFFocusLost

    private void bBuscarExemplarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bBuscarExemplarActionPerformed
        labelExemplar.setForeground(Color.black);
        try {
            TelaBuscarExemplar telaBusca = new TelaBuscarExemplar();
            telaBusca.setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Erro ao abrir tela de buscar exemplar.\n" + ex.getMessage(),
                    "Tela de erro", JOptionPane.ERROR_MESSAGE);
        }
        if (TelaEfetuarEmprestimo.identif == 1) {
            tExemplar.setText(livro.getTitulo());
        } else if (TelaEfetuarEmprestimo.identif == 2) {
            tExemplar.setText(revista.getTitulo());
        }
    }//GEN-LAST:event_bBuscarExemplarActionPerformed

    private void lerArquivo() throws Exception {
        ObjectInputStream arquivo = null;
        Emprestimo emprestimox = null;
        emprestimos.clear();
        try {
            arquivo = new ObjectInputStream(new FileInputStream("ArqEmprestimos.dad"));
            do {
                emprestimox = (Emprestimo) arquivo.readObject();
                emprestimos.add(emprestimox);
            } while (emprestimox != null);
        } catch (EOFException e) {
            arquivo.close();
        }
    }

    private void lerArquivoMultas() throws Exception {
        ObjectInputStream arquivo = null;
        Multa multax = null;
        multas.clear();
        try {
            arquivo = new ObjectInputStream(new FileInputStream("ArqMultas.dad"));
            do {
                multax = (Multa) arquivo.readObject();
                multas.add(multax);
            } while (multax != null);
        } catch (EOFException e) {
            arquivo.close();
        }
    }

    private void lerArquivoAssociados() throws Exception {
        ObjectInputStream arquivo = null;
        Associado associadox = null;
        associados.clear();
        try {
            arquivo = new ObjectInputStream(new FileInputStream("ArqAssociados.dad"));
            do {
                associadox = (Associado) arquivo.readObject();
                associados.add(associadox);
            } while (associadox != null);
        } catch (EOFException e) {
            arquivo.close();
        }
    }

    @Override
    public void bSalvarActionListener(ActionEvent evt) {
        int result;
        try {
            lerArquivoLivros();
        } catch (Exception ex) {
        }
        try {
            lerArquivoAssociados();
        } catch (Exception ex) {
        }
        switch (verificador) {
            case -1:
                //ASSOCIADO NAO ENCONTRADO
                JOptionPane.showMessageDialog(null, "Não foi encontrado o associado com CPF " + tCPF.getText() + ".\nDigite outro CPF.");
                labelCpf.setForeground(Color.red);
                return;
            case -2:
                //MAXIMO DE EMPRESTIMOS
                JOptionPane.showMessageDialog(null, "O associado '" + associado.getNome() + "' já possui o máximo de empréstimos"
                        + "em aberto (3). O mesmo deve efetuar uma devolução para efetuar outro empréstimo.");
                labelCpf.setForeground(Color.red);
                return;
            case -3:
                //MULTA PENDENTE
                JOptionPane.showMessageDialog(null, "O associado '" + associado.getNome() + "' possui multas pendentes. Para efetuar"
                        + "um novo empréstimo o mesmo deve efetuar o pagamento da multa.");
                labelCpf.setForeground(Color.red);
                return;
        }
        if (identif == 0) {
            JOptionPane.showMessageDialog(null, "Selecione um exemplar para o empréstimo!", "SELECIONE UM EXEMPLAR",
                    JOptionPane.ERROR_MESSAGE);
            labelExemplar.setForeground(Color.red);
            return;
        }
        if (identif == 1) {
            for (int x = 0; x < emprestimos.size(); x++) {
                if (emprestimos.get(x).getExemplar().getIDAcervo() == livro.getIDAcervo()) {
                    qntdEmprestadosLiv++;
                }
            }
        } else if (identif == 2) {
            for (int x = 0; x < emprestimos.size(); x++) {
                if (emprestimos.get(x).getExemplar().getIDAcervo() == revista.getIDAcervo()) {
                    qntdEmprestadosRev++;
                }
            }
        }
        if (identif == 1 && livro.getQtdeExemplar() - qntdEmprestadosLiv < 2) {
            if (livro.getQtdeExemplar() - qntdEmprestadosLiv == 1
                    && !livro.getListaDeEspera().isEmpty()
                    && livro.getListaDeEspera().get(0).getCpfAssociado().equals(associado.getCpfAssociado())) {
                livro.getListaDeEspera().remove(0);
                for (int i = 0; i < livros.size(); i++) {
                    if (livros.get(i).getIDAcervo() == livro.getIDAcervo()) {
                        livros.get(i).setListaDeEspera(livro.getListaDeEspera());
                    }
                }
                try {
                    gravaArquivoLivros();
                } catch (Exception ex) {
                }
            } else if (livro.getQtdeExemplar() - qntdEmprestadosLiv == 1 && !livro.getListaDeEspera().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O associado " + associado.getNome() + " não é o primeiro da fila de espera."
                        + "\nO primeiro da fila é: " + livro.getListaDeEspera().get(0).getNome() + ".");
                return;
            } else if (livro.getQtdeExemplar() - qntdEmprestadosLiv <= 0) {
                JOptionPane.showMessageDialog(null, "Não existe exemplares do livro " + livro.getTitulo()
                        + " disponíveis. Todos estão emprestados.", "NÃO POSSUI EXEMPLAR DISPONÍVEL",
                        JOptionPane.ERROR_MESSAGE);
                result = JOptionPane.showConfirmDialog(null, "Deseja colocar " + associado.getNome() + " na fila de espera para emprestar o livro "
                        + livro.getTitulo() + " ?", "ENTRAR NA FILA DE ESPERA", JOptionPane.YES_NO_OPTION);
                if (result == 0) {
                    for (Associado listaDeEspera : livro.getListaDeEspera()) { //Percorre toda lista de espera
                        if (listaDeEspera.getCpfAssociado().equals(associado.getCpfAssociado())) {
                            JOptionPane.showMessageDialog(null, associado.getNome() + " já está em alguma lista de espera.\nÉ possível estar apenas em"
                                    + "uma única fila.", "ASSOCIADO JÁ ESTÁ EM ALGUMA FILA DE ESPERA", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    }
                    livro.getListaDeEspera().add(associado);
                    JOptionPane.showMessageDialog(null, "Associado " + associado.getNome() + " \nadicionado à fila de espera na posição "
                            + livro.getListaDeEspera().size() + ".");
                    for (int i = 0; i < livros.size(); i++) {
                        if (livros.get(i).getIDAcervo() == livro.getIDAcervo()) {
                            livros.get(i).setListaDeEspera(livro.getListaDeEspera());
                        }
                    }
                    try {
                        gravaArquivoLivros();
                    } catch (Exception ex) {
                    }
                }
            }
        } else if (identif == 2 && revista.getQtdeExemplar() - qntdEmprestadosRev < 2) {
            for (int x = 0; x < emprestimos.size(); x++) {
                if (emprestimos.get(x).getExemplar().getIDAcervo() == revista.getIDAcervo()) {
                    qntdEmprestadosRev++;
                }
            }
            if (revista.getQtdeExemplar() - qntdEmprestadosRev == 1
                    && !revista.getListaDeEspera().isEmpty()
                    && revista.getListaDeEspera().get(0).equals(associado)) {
                revista.getListaDeEspera().remove(0);
                for (int i = 0; i < revistas.size(); i++) {
                    if (revistas.get(i).getIDAcervo() == revista.getIDAcervo()) {
                        revistas.get(i).setListaDeEspera(revista.getListaDeEspera());
                    }
                }
                try {
                    gravaArquivoRevistas();
                } catch (Exception ex) {
                }
            } else if (revista.getQtdeExemplar() - qntdEmprestadosRev == 1 && !revista.getListaDeEspera().isEmpty()) {
                JOptionPane.showMessageDialog(null, "O associado " + associado.getNome() + " não é o primeiro da fila de espera."
                        + "\nO primeiro da fila é: " + revista.getListaDeEspera().get(0).getNome() + ".");
                return;
            }
            if (revista.getQtdeExemplar() - qntdEmprestadosRev <= 0) {
                JOptionPane.showMessageDialog(null, "Não existe exemplares da revista " + revista.getTitulo()
                        + " disponíveis. Todos estão emprestados.", "NÃO POSSUI EXEMPLAR DISPONÍVEL",
                        JOptionPane.ERROR_MESSAGE);
                result = JOptionPane.showConfirmDialog(null, "Deseja colocar " + associado.getNome() + " na fila de espera para emprestar a revista "
                        + revista.getTitulo() + " ?", "ENTRAR NA FILA DE ESPERA", JOptionPane.YES_NO_OPTION);
                if (result == 0) {
                    for (Associado listaDeEspera : livro.getListaDeEspera()) { //Percorre toda lista de espera
                        if (listaDeEspera.equals(associado)) {
                            JOptionPane.showMessageDialog(null, associado.getNome() + " já está em alguma lista de espera.\nÉ possível estar apenas em"
                                    + "uma única fila.", "ASSOCIADO JÁ ESTÁ EM ALGUMA FILA DE ESPERA", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    }
                    revista.getListaDeEspera().add(associado);
                    JOptionPane.showMessageDialog(null, "Associado " + associado.getNome() + " \nadicionado à fila de espera na posição "
                            + revista.getListaDeEspera().size() + ".");
                    for (int i = 0; i < revistas.size(); i++) {
                        if (revistas.get(i).getIDAcervo() == revista.getIDAcervo()) {
                            revistas.get(i).setListaDeEspera(revista.getListaDeEspera());
                        }
                    }
                    try {
                        gravaArquivoRevistas();
                    } catch (Exception ex) {
                    }
                }
            }
        }
        result = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja efetuar o empréstimo?");
        if (result == 0) { //Resposta SIM
            emprestimo = new Emprestimo();
            emprestimo.setAssociado(associado);
            emprestimo.setDataEmprestimo(dataAtual);
            emprestimo.setDataDevolucao(data10);
            if (TelaEfetuarEmprestimo.identif == 1) { //LIVRO
                emprestimo.setExemplar(livro);
            } else if (TelaEfetuarEmprestimo.identif == 2) { //REVISTA
                emprestimo.setExemplar(revista);
            }
            int tam = emprestimos.size();
            if (tam == 0) {
                emprestimo.setIdEmprestimo(0);
            } else {
                emprestimo.setIdEmprestimo(emprestimos.get(tam - 1).getIdEmprestimo() + 1);
            }
            emprestimos.add(emprestimo);
            try {
                gravaArquivo();
            } catch (Exception ex) {
                System.out.print(ex);
            }
            LimpaCampos();
            JOptionPane.showMessageDialog(null, "Empréstimo efetuado com sucesso.", "EFETUAR EMPRÉSTIMO",
                    JOptionPane.INFORMATION_MESSAGE);
            result = JOptionPane.showConfirmDialog(null, "Deseja efetuar outro empréstimo?",
                    "OUTRO EMPRÉSTIMO", JOptionPane.YES_NO_OPTION);
            if (result == 1) { //RESPOSTA NÃO
                TelaInicial.max = 0;
                this.dispose();
            } else if (result == 0) { //RESPOSTA SIM
                LimpaCampos();
            }
        }
    }

    @Override
    public void bLimparActionListener(ActionEvent evt
    ) {
        int result = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja limpar tudo?");
        if (result == 0) { //Resposta SIM
            LimpaCampos();
        }
    }

    @Override
    public void bSairActionListener(ActionEvent evt
    ) {
        int result = JOptionPane.showConfirmDialog(null, "Tem certeza que deseja sair da operação?",
                "SAIR", JOptionPane.YES_NO_OPTION);
        if (result == 0) {
            TelaInicial.max = 0;
            this.dispose();
        }
    }

    private void gravaArquivo() throws Exception {
        try {
            ObjectOutputStream arquivo = new ObjectOutputStream(new FileOutputStream("ArqEmprestimos.dad"));
            for (Emprestimo emprestimox : emprestimos) {
                arquivo.writeObject(emprestimox);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Erro ao gravar arquivo de emprestimos.", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void gravaArquivoLivros() throws Exception {
        try {
            ObjectOutputStream arquivo = new ObjectOutputStream(new FileOutputStream("ArqLivros.dad"));
            for (Livro livrox : livros) {
                arquivo.writeObject(livrox);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Erro ao gravar arquivo.", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void gravaArquivoRevistas() throws Exception {
        try {
            ObjectOutputStream arquivo = new ObjectOutputStream(new FileOutputStream("ArqRevistas.dad"));
            for (Revista revistax : revistas) {
                arquivo.writeObject(revistax);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Erro ao gravar arquivo.", "ERRO", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void lerArquivoLivros() throws Exception {
        ObjectInputStream arquivo = null;
        Livro livrox = null;
        livros.clear();
        try {
            arquivo = new ObjectInputStream(new FileInputStream("ArqLivros.dad"));
            do {
                livrox = (Livro) arquivo.readObject();
                livros.add(livrox);
            } while (livrox != null);
        } catch (EOFException e) {
            arquivo.close();
        }
    }

    private void lerArquivoRevistas() throws Exception {
        ObjectInputStream arquivo = null;
        Revista revistax = null;
        revistas.clear();
        try {
            arquivo = new ObjectInputStream(new FileInputStream("ArqRevistas.dad"));
            do {
                revistax = (Revista) arquivo.readObject();
                revistas.add(revistax);
            } while (revistax != null);
        } catch (EOFException e) {
            arquivo.close();
        }
    }

    public void LimpaCampos() {
        DefaultTableModel modelo = (DefaultTableModel) tabelaEmprestimosAssociado.getModel();
        tCPF.setText("");
        livro = null;
        revista = null;
        tNome.setText("");
        tExemplar.setText("");
        tTelefone.setText("");
        identif = 0;
        associado = new Associado();
        for (int k = 0; k < modelo.getRowCount();) { //Limpa tabela
            modelo.removeRow(k);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bBuscarExemplar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelAno;
    private javax.swing.JLabel labelAno1;
    private javax.swing.JLabel labelCpf;
    private javax.swing.JLabel labelDia;
    private javax.swing.JLabel labelDia1;
    private javax.swing.JLabel labelExemplar;
    private javax.swing.JLabel labelMes;
    private javax.swing.JLabel labelMes1;
    private javax.swing.JFormattedTextField tCPF;
    private javax.swing.JTextField tExemplar;
    private javax.swing.JTextField tNome;
    private javax.swing.JTextField tTelefone;
    private javax.swing.JTable tabelaEmprestimosAssociado;
    // End of variables declaration//GEN-END:variables

}
